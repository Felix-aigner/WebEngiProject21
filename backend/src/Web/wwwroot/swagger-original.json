{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Swagger Schmettr",
    "description" : "This is the schmettr server.  You can find\nout more about Swagger at\n[http://swagger.io](http://swagger.io) or on\n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/schmettr/schmettr/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "paths" : {
    "/message" : {
      "get" : {
        "tags" : [ "message" ],
        "summary" : "Get all messages",
        "operationId" : "getMessages",
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "auth" : [ "write:messages", "read:messages" ]
        } ]
      },
      "post" : {
        "tags" : [ "message" ],
        "summary" : "Add a new message",
        "operationId" : "addMessage",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Message"
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "auth" : [ "write:messages", "read:messages" ]
        } ]
      }
    },
    "/message/addComment{messageId}" : {
      "post" : {
        "tags" : [ "comment" ],
        "summary" : "Add a new comment",
        "operationId" : "addComment",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "ID of message to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Comment"
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "auth" : [ "write:messages", "read:messages" ]
        } ]
      }
    },
    "/message/findByCategories" : {
      "get" : {
        "tags" : [ "message" ],
        "summary" : "Finds Messages by category",
        "description" : "Multiple category values can be provided with comma separated strings",
        "operationId" : "findMessagesByCategroies",
        "parameters" : [ {
          "name" : "category",
          "in" : "query",
          "description" : "Category values that need to be considered for filter",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Category"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Message"
                  },
                  "x-content-type" : "application/json"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        },
        "security" : [ {
          "auth" : [ "write:messages", "read:messages" ]
        } ]
      }
    },
    "/message/{messageId}" : {
      "get" : {
        "tags" : [ "message" ],
        "summary" : "Find message by ID",
        "description" : "Returns a single message",
        "operationId" : "getMessageById",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "ID of message to return",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Message"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Message"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Message not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "message" ],
        "summary" : "Updates a message form data",
        "operationId" : "updateMessage",
        "parameters" : [ {
          "name" : "messageId",
          "in" : "path",
          "description" : "ID of message that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/message_messageId_body"
              }
            }
          }
        },
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "auth" : [ "write:messages", "read:messages" ]
        } ]
      },
      "delete" : {
        "tags" : [ "message" ],
        "summary" : "Deletes a message",
        "operationId" : "deleteMessage",
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "messageId",
          "in" : "path",
          "description" : "Message id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Message not found"
          }
        },
        "security" : [ {
          "auth" : [ "write:messages", "read:messages" ]
        } ]
      }
    },
    "/user" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/login" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs user into the system",
        "operationId" : "loginUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "query",
          "description" : "The user name for login",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "headers" : {
              "X-Rate-Limit" : {
                "description" : "calls per hour allowed by the user",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "integer",
                  "format" : "int32"
                }
              },
              "X-Expires-After" : {
                "description" : "date in UTC when token expires",
                "style" : "simple",
                "explode" : false,
                "schema" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              },
              "application/xml" : {
                "schema" : {
                  "type" : "string"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/user/{username}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by user name",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              },
              "application/xml" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "put" : {
        "tags" : [ "user" ],
        "summary" : "Updated user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "name that need to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Updated user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid user supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "The name that needs to be deleted",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Category" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "name" : {
            "type" : "string"
          }
        },
        "example" : {
          "name" : "name",
          "id" : 6
        },
        "xml" : {
          "name" : "Category"
        }
      },
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "username" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "example" : {
          "password" : "password",
          "id" : 1,
          "email" : "email",
          "username" : "username"
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Message" : {
        "required" : [ "content" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "content" : {
            "type" : "string"
          },
          "categories" : {
            "type" : "array",
            "xml" : {
              "name" : "category",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Category"
            }
          },
          "owner" : {
            "$ref" : "#/components/schemas/User"
          },
          "comments" : {
            "type" : "array",
            "xml" : {
              "name" : "comment",
              "wrapped" : true
            },
            "items" : {
              "$ref" : "#/components/schemas/Comment"
            }
          }
        },
        "example" : {
          "owner" : {
            "password" : "password",
            "id" : 1,
            "email" : "email",
            "username" : "username"
          },
          "comments" : [ {
            "owner" : null,
            "id" : 5,
            "content" : "content"
          }, {
            "owner" : null,
            "id" : 5,
            "content" : "content"
          } ],
          "id" : 0,
          "categories" : [ {
            "name" : "name",
            "id" : 6
          }, {
            "name" : "name",
            "id" : 6
          } ],
          "content" : "content"
        },
        "xml" : {
          "name" : "Message"
        }
      },
      "Comment" : {
        "required" : [ "content" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "content" : {
            "type" : "string"
          },
          "owner" : {
            "$ref" : "#/components/schemas/User"
          }
        },
        "example" : {
          "owner" : null,
          "id" : 5,
          "content" : "content"
        },
        "xml" : {
          "name" : "Comment"
        }
      },
      "ApiResponse" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer",
            "format" : "int32"
          },
          "type" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          }
        }
      },
      "message_messageId_body" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Updated name of the pet"
          },
          "status" : {
            "type" : "string",
            "description" : "Updated status of the pet"
          }
        }
      }
    },
    "requestBodies" : {
      "Message" : {
        "description" : "Message object that needs to be added to the message board",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Message"
            }
          }
        },
        "required" : true
      },
      "Comment" : {
        "description" : "Comment object that needs to be added to the message",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Comment"
            }
          }
        },
        "required" : true
      }
    },
    "securitySchemes" : {
      "auth" : {
        "type" : "oauth2",
        "flows" : {
          "implicit" : {
            "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
            "scopes" : {
              "write:messages" : "write messages",
              "read:messages" : "read messages"
            }
          }
        }
      },
      "api_key" : {
        "type" : "apiKey",
        "name" : "api_key",
        "in" : "header"
      }
    }
  }
}
