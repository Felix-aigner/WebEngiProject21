/*
 * Swagger Schmettr
 *
 * This is the schmettr server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Data.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Services.Exceptions;
using Services.Interfaces;
using Swashbuckle.AspNetCore.Annotations;
using Web.Attributes;
using Web.Security;

namespace Web.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MessageApiController : ControllerBase
    {
        private readonly IMessageService _messageService;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="messageService"></param>
        public MessageApiController(IMessageService messageService)
        {
            _messageService = messageService;
        }

        /// <summary>
        /// Add a new message
        /// </summary>
        /// <param name="body">Message object that needs to be added to the message board</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/schmettr/schmettr/1.0.0/message")]
        [ValidateModelState]
        [SwaggerOperation("AddMessage")]
        public virtual IActionResult AddMessage([FromBody]Message body)
        {
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);
            try
            {
                var message = _messageService.Create(body);
                return Ok(message);
            }
            catch (Exception e)
            {
                return Problem(e.Message);
            }
        }

        /// <summary>
        /// Deletes a message
        /// </summary>
        /// <param name="messageId">Message id to delete</param>
        /// <param name="apiKey"></param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Message not found</response>
        [HttpDelete]
        [Route("/schmettr/schmettr/1.0.0/message/{messageId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteMessage")]
        public virtual IActionResult DeleteMessage([FromRoute][Required]Guid messageId, [FromHeader]string apiKey)
        {
            try
            {
                _messageService.Delete(messageId);
                return Ok();
            }
            catch (MessageNotFoundException e)
            {
                return NotFound(e);
            }
            catch (Exception e)
            {
                return Problem(e.Message);
            }
        }

        /// <summary>
        /// Finds Messages by category
        /// </summary>
        /// <remarks>Multiple category values can be provided with comma separated strings</remarks>
        /// <param name="category">Category values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/schmettr/schmettr/1.0.0/message/findByCategories")]
        [ValidateModelState]
        [SwaggerOperation("FindMessagesByCategroies")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Message>), description: "successful operation")]
        public virtual IActionResult FindMessagesByCategroies([FromQuery][Required()]List<Category> category)
        {
            try
            {
                var messages = _messageService.GetByCategories(category);
                return Ok(messages);
            }
            catch (Exception e)
            {
                return Problem(e.Message);
            }

            string exampleJson = null;
            exampleJson = "[ {\n  \"owner\" : {\n    \"password\" : \"password\",\n    \"id\" : 1,\n    \"email\" : \"email\",\n    \"username\" : \"username\"\n  },\n  \"comments\" : [ {\n    \"id\" : 5,\n    \"content\" : \"content\"\n  }, {\n    \"id\" : 5,\n    \"content\" : \"content\"\n  } ],\n  \"id\" : 0,\n  \"categories\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 6\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 6\n  } ],\n  \"content\" : \"content\"\n}, {\n  \"owner\" : {\n    \"password\" : \"password\",\n    \"id\" : 1,\n    \"email\" : \"email\",\n    \"username\" : \"username\"\n  },\n  \"comments\" : [ {\n    \"id\" : 5,\n    \"content\" : \"content\"\n  }, {\n    \"id\" : 5,\n    \"content\" : \"content\"\n  } ],\n  \"id\" : 0,\n  \"categories\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 6\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 6\n  } ],\n  \"content\" : \"content\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Message>>(exampleJson)
                        : default(List<Message>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Find message by ID
        /// </summary>
        /// <remarks>Returns a single message</remarks>
        /// <param name="messageId">ID of message to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Message not found</response>
        [HttpGet]
        [Route("/schmettr/schmettr/1.0.0/message/{messageId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetMessageById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Message), description: "successful operation")]
        public virtual IActionResult GetMessageById([FromRoute][Required]Guid messageId)
        {
            try
            {
                var message = _messageService.GetBy(messageId);
                return Ok(message);
            }
            catch (MessageNotFoundException e)
            {
                return NotFound(e);
            }
            catch (Exception e)
            {
                return Problem(e.Message);
            }

            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : {\n    \"password\" : \"password\",\n    \"id\" : 1,\n    \"email\" : \"email\",\n    \"username\" : \"username\"\n  },\n  \"comments\" : [ {\n    \"id\" : 5,\n    \"content\" : \"content\"\n  }, {\n    \"id\" : 5,\n    \"content\" : \"content\"\n  } ],\n  \"id\" : 0,\n  \"categories\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 6\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 6\n  } ],\n  \"content\" : \"content\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Message>(exampleJson)
                        : default(Message);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all messages
        /// </summary>
        /// <response code="405">Invalid input</response>
        [HttpGet]
        [Route("/schmettr/schmettr/1.0.0/message")]
        [ValidateModelState]
        [SwaggerOperation("GetMessages")]
        public virtual IActionResult GetMessages()
        {
            try
            {
                var messages = _messageService.GetAll();
                return Ok(messages);
            }
            catch (Exception e)
            {
                return Problem(e.Message);
            }
        }

    }
}
